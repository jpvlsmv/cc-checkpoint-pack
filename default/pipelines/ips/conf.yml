output: default
streamtags: []
groups: {}
asyncFuncTimeout: 1000
functions:
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Parse and aggregate Checkpoint product=IPS logs
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: >-
        All fields are either to be dropped, "unrecognized", to be aggregated.


        This is properly implemented by each field being listed in exactly 2 of the sections:


        For something we definitely DO need,
          * it MUST be EXcluded in the Serialize "Take all unknown fields..."
          * it MUST have a aggregation function specified in the Aggregations

        For something we definitely DO NOT need, 
          * it MUST be INcluded as a Remove Fields in the Eval "Explicitly remove fields to be dropped" list
          * it MUST be EXcluded (!fieldname) in the Serialize "Take all unknown fields..."
  - id: eval
    filter: "true"
    disabled: null
    conf:
      remove: []
    description: Explicitly remove fields to be dropped from output
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Combine everything that's not going to be aggregated
  - id: serialize
    filter: "true"
    disabled: null
    conf:
      type: kvp
      fields:
        - "!_*"
        - "!action"
        - "!attack"
        - "!attack_info"
        - "!confidence_level"
        - "!cribl_breaker"
        - "!cribl_pipe"
        - "!dst"
        - "!host"
        - "!hostname"
        - "!ifdir"
        - "!ifname"
        - "!index"
        - "!loguid"
        - "!origin"
        - "!originsicname"
        - "!performance_impact"
        - "!product"
        - "!protection_id"
        - "!protection_name"
        - "!protection_type"
        - "!proto"
        - "!rule"
        - "!rule_name"
        - "!rule_uid"
        - "!s_port"
        - "!sequencenum"
        - "!service"
        - "!severity"
        - "!smartdefense_profile"
        - "!sourcetype"
        - "!src"
        - "!sub_policy_name"
        - "!sub_policy_uid"
        - "!time"
        - "!version"

      dstField: unrecognized_fields
      cleanFields: false
    description: Take all remaining unknown fields into _unrecognized_fields
  - id: mask
    filter: "true"
    disabled: null
    conf:
      rules:
        - matchRegex: / /g
          replaceExpr: "'%20'"
      fields:
        - unrecognized_fields
      depth: 5
    description: Replace space in unrecognized_fields with %20 so it is a single value
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Compute the aggregated values
  - id: aggregation
    filter: "true"
    disabled: false
    conf:
      passthrough: false
      preserveGroupBys: false
      sufficientStatsOnly: false
      metricsMode: false
      timeWindow: 60s
      aggregations:
        - min(sequencenum)
        - max(sequencenum)
        - values(unrecognized_fields)
        - last(action)
        - last(attack)
        - last(attack_info)
        - last(confidence_level)
        - last(dst)
        - last(ifdir)
        - last(ifname)
        - last(origin)
        - last(originsicname)
        - last(performance_impact)
        - last(product)
        - last(protection_id)
        - last(protection_name)
        - last(protection_type)
        - last(proto)
        - last(rule)
        - last(rule_name)
        - last(rule_uid)
        - last(s_port)
        - last(logid)
        - last(match_id)
        - last(message_info)
        - last(origin)
        - last(originsicname)
        - last(outzone)
        - last(product)
        - last(proto)
        - last(protocol)
        - last(service)
        - last(severity)
        - last(smartdefense_profile)
        - last(src)
        - last(sub_policy_name)
        - last(version)
        - last(src)
        - min(start_time)
        - min(time)
        - max(time)
        - last(src_uo_name)
        - values(hll_key).as(hll_key_list)
      cumulative: false
      flushOnInputClose: true
      groupbys:
        - loguid
    description: Aggregate expected fields
  - id: eval
    filter: "true"
    disabled: false
    conf:
      add:
        - name: rule_names
          value: rule_name_list.join(',')
        - name: hll_keys
          value: hll_key_list.join(',')
        - name: rule_uids
          value: rule_uid_list.join(',')
        - name: sig_ids
          value: sig_id_list.join(',')
        - name: unrecognized_fields
          value: unrecognized_fields_values.join('%20')
      remove:
        - hll_key_list
        - rule_name_list
        - rule_uid_list
        - unrecognized_fields_values
        - sig_id_list
    description: Sanitize _list aggregations
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Assemble the final result
  - id: serialize
    filter: "true"
    disabled: null
    conf:
      type: kvp
      fields:
        - "!_*"
        - "*"
      dstField: _raw
      cleanFields: false
    description: Reconstruct kv pairs
  - id: mask
    filter: "true"
    disabled: null
    conf:
      rules:
        - matchRegex: /_last=/g
          replaceExpr: "'='"
        - matchRegex: /_earliest=/g
          replaceExpr: "'='"
      fields:
        - _raw
      depth: 5
    description: Remove aggregation function from field names
  - id: mask
    filter: "true"
    disabled: null
    conf:
      rules:
        - matchRegex: /\s/g
          replaceExpr: "'\\|'"
        - matchRegex: /%20/g
          replaceExpr: "' '"
        - matchRegex: /="/g
          replaceExpr: '"="'
        - matchRegex: /"(\||$)/g
          replaceExpr: g1
      fields:
        - _raw
      depth: 5
    description: Cleanup record separator and dequote values
  - id: eval
    filter: "true"
    disabled: false
    conf:
      add:
        - name: index
          value: "'checkpoint'"
        - name: sourcetype
          value: "'cp_logs'"
      keep:
        - index
        - sourcetype
        - _raw
        - _time
      remove:
        - "*"
    description: Set required output metadata and drop fields
    final: true
description: Pipeline to handle data from product=IPS
