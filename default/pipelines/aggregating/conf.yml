{
  "id": "firewall",
  "conf": {
    "output": "default",
    "streamtags": [],
    "groups": {},
    "asyncFuncTimeout": 1000,
    "functions": [
      {
        "filter": "true",
        "conf": {
          "comment": "Parse and aggregate Checkpoint product=Firewall logs"
        },
        "id": "comment"
      },
      {
        "filter": "true",
        "conf": {
          "comment": "All fields are either to be dropped, \"unrecognized\", to be aggregated.\n\nThis is properly implemented by each field being listed in exactly 2 of the sections:\n\nFor something we definitely DO need,\n  * it MUST be EXcluded in the Serialize \"Take all unknown fields...\"\n  * it MUST have a aggregation function specified in the Aggregations\n\nFor something we definitely DO NOT need, \n  * it MUST be INcluded as a Remove Fields in the Eval \"Explicitly remove fields to be dropped\" list\n  * it MUST be EXcluded (!fieldname) in the Serialize \"Take all unknown fields...\""
        },
        "id": "comment"
      },
      {
        "filter": "true",
        "conf": {
          "remove": []
        },
        "id": "eval",
        "description": "Explicitly remove fields to be dropped from output"
      },
      {
        "filter": "true",
        "conf": {
          "comment": "Combine everything that's not going to be aggregated"
        },
        "id": "comment"
      },
      {
        "filter": "true",
        "conf": {
          "type": "kvp",
          "fields": [
            "!_*",
            "!sequencenum",
            "*"
          ],
          "dstField": "unrecognized_fields",
          "cleanFields": false
        },
        "id": "serialize",
        "description": "Take all remaining unknown fields into _unrecognized_fields"
      },
      {
        "filter": "true",
        "conf": {
          "rules": [
            {
              "matchRegex": "/ /g",
              "replaceExpr": "'%20'"
            }
          ],
          "fields": [
            "unrecognized_fields"
          ],
          "depth": 5
        },
        "id": "mask",
        "description": "Replace space in unrecognized_fields with %20 so it is a single value"
      },
      {
        "filter": "true",
        "conf": {
          "comment": "Compute the aggregated values"
        },
        "id": "comment"
      },
      {
        "filter": "true",
        "conf": {
          "passthrough": false,
          "preserveGroupBys": false,
          "sufficientStatsOnly": false,
          "metricsMode": false,
          "timeWindow": "60s",
          "aggregations": [
            "min(sequencenum)",
            "max(sequencenum)",
            "values(unrecognized_fields)"
          ],
          "cumulative": false,
          "flushOnInputClose": true,
          "groupbys": [
            "loguid"
          ]
        },
        "id": "aggregation",
        "description": "Aggregate expected fields",
        "disabled": false
      },
      {
        "filter": "true",
        "conf": {
          "add": [
            {
              "name": "unrecognized_fields",
              "value": "unrecognized_fields_values.join('%20')"
            }
          ],
          "remove": [
            "unrecognized_fields_values"
          ]
        },
        "id": "eval",
        "description": "Sanitize _list aggregations",
        "disabled": false
      },
      {
        "filter": "true",
        "conf": {
          "comment": "Assemble the final result"
        },
        "id": "comment"
      },
      {
        "filter": "true",
        "conf": {
          "type": "kvp",
          "fields": [
            "!_*",
            "*"
          ],
          "dstField": "_raw",
          "cleanFields": false
        },
        "id": "serialize",
        "description": "Reconstruct kv pairs"
      },
      {
        "filter": "true",
        "conf": {
          "rules": [
            {
              "matchRegex": "/_last=/g",
              "replaceExpr": "'='"
            },
            {
              "matchRegex": "/_earliest=/g",
              "replaceExpr": "'='"
            }
          ],
          "fields": [
            "_raw"
          ],
          "depth": 5
        },
        "id": "mask",
        "description": "Remove aggregation function from field names"
      },
      {
        "filter": "true",
        "conf": {
          "rules": [
            {
              "matchRegex": "/\\s/g",
              "replaceExpr": "'\\|'"
            },
            {
              "matchRegex": "/%20/g",
              "replaceExpr": "' '"
            },
            {
              "matchRegex": "/=\"/g",
              "replaceExpr": "\"=\""
            },
            {
              "matchRegex": "/\"(\\||$)/g",
              "replaceExpr": "g1"
            }
          ],
          "fields": [
            "_raw"
          ],
          "depth": 5
        },
        "id": "mask",
        "description": "Cleanup record separator and dequote values"
      },
      {
        "filter": "true",
        "conf": {
          "add": [
            {
              "name": "index",
              "value": "'checkpoint'"
            },
            {
              "name": "sourcetype",
              "value": "'cp_logs'"
            }
          ],
          "keep": [
            "index",
            "souretype",
            "_raw",
            "_time"
          ],
          "remove": [
            "*"
          ]
        },
        "id": "eval",
        "description": "Set required output metadata and drop fields",
        "final": true,
        "disabled": false
      }
    ],
    "description": "Pipeline to handle data from product=Firewall"
  }
}
